enum HabitRecordStatus {
  SUCCESS
  FAILED
  PENDING
}

enum SprintStatus {
  SUCCESS
  FAILED
  PENDING
}

enum SprintsFilter {
  TODAY
  ALL
}

input OnboardInput {
  name: String!
  iconPath: String!
}

input UpdateProfileInput {
  name: String!
  iconPath: String!
}

input CreateHabitInput {
  name: String!
  description: String!
}

input UpdateHabitInput {
  name: String!
  description: String!
}

input UpdateHabitRecordInput {
  habitId: String!
  date: String!
  status: HabitRecordStatus!
}

input CreateSprintInput {
  name: String!
  description: String!
}

input UpdateSprintStatusInput {
  status: SprintStatus!
}

input UpdateSprintInput {
  name: String!
  description: String!
}

input CreateTweetInput {
  content: String!
}

type HabitRecord {
  id: ID!
  date: String!
  status: HabitRecordStatus!
  habitId: String!
  habit: Habit!
}

type Habit {
  id: ID!
  name: String!
  description: String!
  habitRecords: [HabitRecord!]!
  tooHard: Boolean!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type Sprint {
  id: ID!
  name: String!
  description: String!
  status: SprintStatus!
  active: Boolean!
  createdAt: String!
  createdOn: String!
}

type SprintEdge {
  cursor: String!
  node: Sprint!
}

type SprintConnection {
  edges: [SprintEdge!]!
  pageInfo: PageInfo!
}

type Tweet {
  id: ID!
  content: String!
  createdAt: String!
  formattedCreatedAt: String!
}

type TweetEdge {
  cursor: String!
  node: Tweet!
}

type TweetConnection {
  edges: [TweetEdge!]!
  pageInfo: PageInfo!
}

type User {
  id: ID!
  name: String!
  iconUrl: String
  habits: [Habit!]!
  habit(id: ID!): Habit!
  sprints(first: Int, after: String, filter: SprintsFilter): SprintConnection!
  sprint(id: ID!): Sprint!
  tweets(first: Int, after: String): TweetConnection!
}

type Query {
  viewer: User
}

type Mutation {
  onboard(input: OnboardInput!): User!
  updateProfile(input: UpdateProfileInput!): User!
  deleteAccount: ID!
  createHabit(input: CreateHabitInput!): Habit!
  updateHabit(id: ID!, input: UpdateHabitInput!): Habit!
  updateHabitRecord(input: UpdateHabitRecordInput!): HabitRecord!
  deleteHabit(id: ID!): Habit!
  createSprint(input: CreateSprintInput!): Sprint!
  updateSprintStatus(id: ID!, input: UpdateSprintStatusInput!): Sprint!
  updateSprint(id: ID!, input: UpdateSprintInput!): Sprint!
  deleteAllPastSprints: User!
  deleteSprint(id: ID!): Sprint!
  createTweet(input: CreateTweetInput!): Tweet!
  deleteTweet(id: ID!): Tweet!
}
